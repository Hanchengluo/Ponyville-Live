<?
$title = 'PVL! Administration Dashboard';
$manual = true;

$this->assets->collection('custom_js')
    ->addJs('//cdn.socket.io/socket.io-1.2.1.js', false)
    ->addJs('//cdnjs.cloudflare.com/ajax/libs/socket.io/1.2.1/socket.io.js', false)
    ->addJs('//code.highcharts.com/highcharts.js', false)
    ->addJs('//code.highcharts.com/highcharts-more.js', false)
    ->addJs('//code.highcharts.com/modules/exporting.js', false)
    ->addJs('vendor/moment/moment.js');

$skin = \PVL\Customization::get('theme');
if ($skin == "dark")
    $this->assets->collection('custom_js')->addJs('js/highcharts/dark-blue.js');

// Admin sidebar.
$sidebar = array(
    'System Maintenance' => array(
        'System Settings' => array(
            'url'       => 'admin/settings',
            'icon'      => 'icon-cog',
            'permission' => $this->acl->isAllowed('administer all'),
        ),
        'User Accounts' => array(
            'url'       => 'admin/users',
            'icon'      => 'icon-user',
            'permission' => $this->acl->isAllowed('administer all'),
        ),
        'Roles and Permissions' => array(
            'url'       => 'admin/permissions',
            'icon'      => 'icon-key',
            'permission' => $this->acl->isAllowed('administer all'),
        ),
        'Send Bulk Message' => array(
            'url'       => 'admin/contact',
            'icon'      => 'icon-envelope',
            'permission' => $this->acl->isAllowed('administer all'),
        ),
        'API Usage Report' => array(
            'url'       => 'admin/api',
            'icon'      => 'icon-puzzle-piece',
            'permission' => $this->acl->isAllowed('administer all'),
            'title'     => 'WARNING: This script can take a long time!!',
        ),
    ),
    'Site Content' => array(
        'Affiliates' => array(
            'url'       => 'admin/affiliates',
            'icon'      => 'icon-group',
            'permission' => $this->acl->isAllowed('administer affiliates'),
        ),
        'Conventions' => array(
            'url'       => 'admin/conventions',
            'icon'      => 'icon-flag',
            'permission' => $this->acl->isAllowed('administer conventions'),
        ),
        'Blocks of Content' => array(
            'url'       => 'admin/blocks',
            'icon'      => 'icon-list-alt',
            'permission' => $this->acl->isAllowed('administer blocks'),
        ),
        'PVLive.me Short URLs' => array(
            'url'       => 'admin/urls',
            'icon'      => 'icon-globe',
            'permission' => $this->acl->isAllowed('view administration'),
        ),
    ),
    'Music and Artists' => array(
        'Artists' => array(
            'url'       => 'admin/artists',
            'icon'      => 'icon-star',
            'permission' => $this->acl->isAllowed('administer artists'),
        ),
        'Songs' => array(
            'url'       => 'admin/songs',
            'icon'      => 'icon-music',
            'permission' => $this->acl->isAllowed('administer songs'),
        ),
        'Top Songs for Week' => array(
            'url'       => 'admin/songs/votes',
            'icon'      => 'icon-sort-by-order',
            'permission' => $this->acl->isAllowed('administer songs'),
        ),
    ),

    'Stations' => array(
        'Manage Stations' => array(
            'url'       => 'admin/stations',
            'icon'      => 'icon-cog',
            'permission' => $this->acl->isAllowed('administer stations'),
        ),
    ),
    'Podcasts' => array(
        'Manage Podcasts' => array(
            'url'       => 'admin/podcasts',
            'icon'      => 'icon-cog',
            'permission' => $this->acl->isAllowed('administer podcasts'),
        ),
    ),
);

foreach($stations as $station)
{
    $sidebar['Stations'][$station->name] = array(
        'url'       => array('module' => 'stations', 'action' => 'index', 'station' => $station->id),
        'icon'      => $station->getCategoryIcon(),
        'permission' => $station->canManage(),
    );
}

$sidebar_podcasts = array();
foreach($podcasts as $podcast)
{
    $sidebar_podcasts[$podcast->name] = array(
        'url'       => array('module' => 'podcasts', 'action' => 'index', 'podcast' => $podcast->id),
        'icon'      => 'icon-rss',
        'permission' => $podcast->canManage(),
    );
}

// Add podcasts listed alphabetically.
ksort($sidebar_podcasts);
$sidebar['Podcasts'] = array_merge($sidebar['Podcasts'], $sidebar_podcasts);

/* Retired links:
admin/rotators | icon-refresh | Rotating Banners
 */

// Process and purge based on permissions.
foreach($sidebar as $sidebar_category => &$sidebar_items)
{
    foreach($sidebar_items as $item_name => $item_params)
    {
        if (!$item_params['permission'])
            unset($sidebar_items[$item_name]);
    }

    if (empty($sidebar_items))
        unset($sidebar[$sidebar_category]);
}
?>

<div class="row-fluid">
    <div class="span3">
        <div class="well">
            <p><small><b>Note:</b> Below are the administration sections you have access to. If you are missing a feature, please let the PVL administrators know!</small></p>

            <? foreach($sidebar as $category_name => $category_items): ?>
            <h4><?=$category_name ?></h4>

            <ul class="nav nav-list" <? if (count($category_items) >= 15): ?>style="height: 300px; overflow-y: scroll;"<? endif; ?>>
                <? foreach($category_items as $item_name => $item_params): ?>
                <li>
                    <a href="<?=(is_array($item_params['url']) ? $this->viewHelper->route($item_params['url']) : $this->url->get($item_params['url'])) ?>" target="_blank" title="<?=$item_params['title'] ?>">
                        <i class="<?=$item_params['icon'] ?>"></i> <?=$item_name ?>
                    </a>
                </li>
                <? endforeach; ?>
            </ul>
            <? endforeach; ?>
        </div>
    </div>
    <div class="span9">
        <div id="network_chart" style="height: 250px;"></div>
        <div id="station_chart" style="height: 450px;"></div>

        <div class="row-fluid">
            <div class="span6">
                <div id="api_chart" style="height: 300px;"></div>
            </div>
            <div class="span6">
                <div id="podcast_chart" style="height: 300px;"></div>
            </div>
        </div>

    <? if ($this->acl->isAllowed('administer all')): ?>
        <h2>Synchronization Status</h2>
        <div class="well">
            <div class="row-fluid">
            <? foreach($sync_times as $sync_key => $sync_info): ?>
                <div class="span3">
                    <h4><?=$sync_info['name'] ?></h4>
                    <p><?=date('F j, Y g:ia', $sync_info['latest']) ?><br><small><?=$sync_info['diff_text'] ?> ago</small></p>

                    <div class="buttons">
                        <?=$this->viewHelper->button(array(
                            'type'      => 'small',
                            'href'      => $this->viewHelper->routeFromHere(array('action' => 'sync', 'type' => $sync_key)),
                            'text'      => 'Run Manually',
                            'target'    => '_blank',
                        )) ?>
                    </div>

                    <p><small>
                        <?=implode('<br>', $sync_info['contents']) ?>
                    </small></p>
                </div>
            <? endforeach; ?>
            </div>
        </div>

        <h2>Real-Time Statistics</h2>
        <div class="well">
            <div class="row-fluid">
                <div class="span3">
                    <h4>PVLNode Service</h4>
                    <dl>
                        <dt><?=(int)$pvlnode_stats['clients'] ?></dt>
                        <dd>Active Connections</dd>

                        <dt><?=\DF\Utilities::timeDifferenceText(time(), $pvlnode_stats['latest_update']) ?></dt>
                        <dd>Since Last Update</dd>
                    </dl>
                </div>
                <div class="span9">
                    <h4>Websocket Updates</h4>
                    <div id="websocket_updates" style="height: 150px; overflow-y: scroll; overflow-x: hidden;">

                    </div>
                </div>
            </div>
        </div>
    <? endif; ?>
    </div>
</div>

<script type="text/javascript">
var pvlnode_remote_url = '<?=$this->config->apis->pvlnode_remote_url ?>';
var pvlnode_remote_path = '<?=$this->config->apis->pvlnode_remote_path ?>';

$(function() {
    socket = io(pvlnode_remote_url, {path: pvlnode_remote_path});

    socket.on('connect', function(){});
    socket.on('disconnect', function(){});

    socket.on('nowplaying', function(e) {
        console.log(e);
        pushPvlNodeUpdate('Nowplaying updated.');
    });

    socket.on('schedule.event_upcoming', function(e) {
        console.log(e);

        var station_name = e.station.name;
        var station_image = e.station.image_url;

        var event_name = e.event.title;
        var event_url = e.event.web_url;

        pushPvlNodeUpdate('Upcoming event: '+event_name+' on '+station_name);
    });

    socket.on('podcast.new_episode', function(e) {
        console.log(e);

        var podcast_name = e.podcast.name;
        var podcast_image = e.podcast.image_url;

        var episode_name = e.episode.title;
        var episode_url = e.episode.web_url;

        pushPvlNodeUpdate('New podcast episode: '+podcast_name+' - <a href="'+episode_url+'" target="_blank">'+episode_name+'</a>');
    });
});

function pushPvlNodeUpdate(update_text) {

    var update_time = moment().format("MMM Do, h:mm:ss a");
    var update_html = '<div><b>'+update_time+'</b>: '+update_text;

    $('#websocket_updates').prepend(update_html);
}
</script>
<script type="text/javascript">
$(function () {
    Highcharts.setOptions({
        global: {
            useUTC: false
        }
    });

    var datetime_axis = {
        type: 'datetime',
        labels: {
            formatter: function () {
                return Highcharts.dateFormat('%a %d %b', this.value);
            },
            dateTimeLabelFormats: {
                minute: '%H:%M',
                hour: '%H:%M',
                day: '%e. %b',
                week: '%e. %b',
                month: '%b \'%y',
                year: '%Y'
            }
        }
    };

    var hourly_axis = {
        type: 'datetime',
        labels: {
            formatter: function () {
                return Highcharts.dateFormat('%H:%M', this.value);
            },
            dateTimeLabelFormats: {
                minute: '%H:%M',
                hour: '%H:%M',
                day: '%e. %b',
                week: '%e. %b',
                month: '%b \'%y',
                year: '%Y'
            }
        }
    };
        
    $('#network_chart').highcharts({
        chart: { zoomType: 'x' },
        title: { text: 'PVL Network Traffic by Day' },
        xAxis: datetime_axis,
        plotOptions: {
            spline: {
                marker: { enabled: false }
            }
        },
        yAxis: {
            title: { text: 'Listeners' },
            min: 0,
            max: 500
        },
        tooltip: {
            crosshairs: true,
            shared: true,
            xDateFormat: '%Y-%m-%d'
        },
        colors: [
            '#AEE1FF',
            '#0091E5',
            '#FFA6A6',
            '#8C0000'
        ],
        
        series: <?=$metrics['network'] ?>
    });

    $('#station_chart').highcharts({
        chart: { zoomType: 'x' },
        title: { text: 'PVL Station Traffic by Day' },
        xAxis: datetime_axis,
        plotOptions: {
            spline: {
                lineWidth: 1,
                marker: { enabled: false },
                shadow: false,
                states: {
                    hover: {
                        lineWidth: 3
                    }
                },
                threshold: null
            }
        },
        yAxis: {
            title: { text: 'Listeners' },
            min: 0,
            max: 100
        },
        tooltip: {
            crosshairs: true,
            xDateFormat: '%Y-%m-%d'
        },
        
        series: <?=$metrics['station'] ?>
    });

    $('#api_chart').highcharts({
        chart: { zoomType: 'x' },
        title: { text: 'Hourly API Traffic' },
        xAxis: hourly_axis,
        plotOptions: {
            spline: {
                lineWidth: 1,
                marker: { enabled: false },
                shadow: false,
                states: {
                    hover: {
                        lineWidth: 3
                    }
                },
                threshold: null
            }
        },
        yAxis: {
            title: { text: 'Calls' },
            min: 0
        },
        tooltip: {
            crosshairs: true,
            xDateFormat: '%Y-%m-%d %H:%M'
        },

        series: <?=$metrics['api'] ?>
    });

    $('#podcast_chart').highcharts({
        chart: { zoomType: 'x' },
        title: { text: 'Hourly Podcast Traffic' },
        xAxis: hourly_axis,
        plotOptions: {
            spline: {
                lineWidth: 1,
                marker: { enabled: false },
                shadow: false,
                states: {
                    hover: {
                        lineWidth: 3
                    }
                },
                threshold: null
            }
        },
        yAxis: {
            title: { text: 'Traffic' },
            min: 0
        },
        tooltip: {
            crosshairs: true,
            xDateFormat: '%Y-%m-%d %H:%M'
        },

        series: <?=$metrics['podcast'] ?>
    });
});
</script>